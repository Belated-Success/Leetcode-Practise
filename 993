/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution { // breadth first search--->
    
    int find_heightParent(TreeNode *curr,int &parent,int value,int height){
        if(!curr)
            return 0;
        if(curr->val==value)
            return height;
        
        parent = curr->val;
        int left = find_heightParent(curr-> left,parent,value,height+1);
        if(left)
            return left;
        parent = curr->val;
        int right = find_heightParent(curr-> right,parent,value,height+1);
        return right;
    
    }
public:
    bool isCousins(TreeNode* root, int x, int y) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        if(root->val==x || root->val==y)
            return false;
        
        int parent =-1;
        int xheight = find_heightParent(root,parent,x,0);
        
        int yparent =-1;
        int yheight = find_heightParent(root,yparent,y,0);
        
        if(parent != yparent && xheight==yheight)
            return true;
        return false;
    }
};
